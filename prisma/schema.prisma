// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  walletAddress String?       @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  portfolios    Portfolio[]
  transactions  Transaction[]
  positions     Position[]
  auditLogs     AuditLog[]
}

model Portfolio {
  id            String         @id @default(cuid())
  userId        String
  type          PortfolioType
  totalValue    Float         @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  assets        Asset[]
  transactions  Transaction[]
  positions     Position[]
}

model Asset {
  id          String    @id @default(cuid())
  portfolioId String
  symbol      String
  quantity    Float
  avgPrice    Float
  currentPrice Float
  lastUpdated DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
}

model Position {
  id              String           @id @default(cuid())
  userId          String
  portfolioId     String
  symbol          String
  type            PositionType
  positionType    PositionMode    @default(SPOT)
  entryPrice      Float
  currentPrice    Float
  quantity        Float
  leverage        Int             @default(1)
  liquidationPrice Float?
  margin          Float
  maintenanceMargin Float?
  fundingRate     Float?
  nextFundingTime DateTime?
  unrealizedPnL   Float
  realizedPnL     Float           @default(0)
  status          PositionStatus
  closedAt        DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  portfolio       Portfolio        @relation(fields: [portfolioId], references: [id])
  transactions    Transaction[]
}

model Transaction {
  id          String           @id @default(cuid())
  userId      String
  portfolioId String
  positionId  String?
  type        TransactionType
  symbol      String
  quantity    Float
  price       Float
  fee         Float?
  total       Float
  status      TransactionStatus
  hash        String?         // blockchain transaction hash
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  portfolio   Portfolio        @relation(fields: [portfolioId], references: [id])
  position    Position?        @relation(fields: [positionId], references: [id])
}

model AuditLog {
  id          String    @id @default(cuid())
  userId      String
  action      String
  details     Json
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
}

enum PortfolioType {
  REAL
  MOCK
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BUY
  SELL
  STAKE
  UNSTAKE
  MOCK_BUY
  MOCK_SELL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PositionType {
  LONG
  SHORT
}

enum PositionMode {
  SPOT
  PERPETUAL
  FUTURES
}

enum PositionStatus {
  OPEN
  CLOSED
  LIQUIDATED
}
